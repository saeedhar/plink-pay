{"version":3,"file":"adminAuthService-BP57GXMB.js","sources":["../../src/features/admin/api/adminAuthService.ts"],"sourcesContent":["import { adminHttp } from './adminHttp';\n\nexport interface LoginRequest {\n  email: string;\n  password: string;\n}\n\nexport interface LoginResponse {\n  token: string;\n  role: 'admin';\n  name: string;\n}\n\nexport interface AdminProfile {\n  role: 'admin';\n  name: string;\n}\n\n/**\n * Admin authentication service\n */\nexport class AdminAuthService {\n  /**\n   * Authenticate admin user and return profile with token\n   */\n  async login(email: string, password: string): Promise<LoginResponse> {\n    const response = await adminHttp<LoginResponse>('/api/admin/login', {\n      method: 'POST',\n      body: JSON.stringify({ email, password })\n    });\n\n    // Store token in sessionStorage for future requests\n    if (response.token) {\n      sessionStorage.setItem('admin_token', response.token);\n      sessionStorage.setItem('admin_user', JSON.stringify({\n        role: response.role,\n        name: response.name\n      }));\n    }\n\n    return response;\n  }\n\n  /**\n   * Get current admin profile (requires valid token)\n   */\n  async me(): Promise<AdminProfile> {\n    return adminHttp<AdminProfile>('/api/admin/me');\n  }\n\n  /**\n   * Sign out admin user\n   */\n  signOut(): void {\n    sessionStorage.removeItem('admin_token');\n    sessionStorage.removeItem('admin_user');\n  }\n\n  /**\n   * Check if admin is currently authenticated\n   */\n  isAuthenticated(): boolean {\n    const token = sessionStorage.getItem('admin_token');\n    return !!token && token.startsWith('adm_');\n  }\n\n  /**\n   * Get stored admin profile without API call\n   */\n  getStoredProfile(): AdminProfile | null {\n    try {\n      const userStr = sessionStorage.getItem('admin_user');\n      return userStr ? JSON.parse(userStr) : null;\n    } catch {\n      return null;\n    }\n  }\n}\n\n// Export singleton instance\nexport const adminAuthService = new AdminAuthService();\n"],"names":["AdminAuthService","email","password","response","adminHttp","token","userStr","adminAuthService"],"mappings":"wCAqBO,MAAMA,CAAiB,CAI5B,MAAM,MAAMC,EAAeC,EAA0C,CACnE,MAAMC,EAAW,MAAMC,EAAyB,mBAAoB,CAClE,OAAQ,OACR,KAAM,KAAK,UAAU,CAAE,MAAAH,EAAO,SAAAC,EAAU,CAAA,CACzC,EAGD,OAAIC,EAAS,QACX,eAAe,QAAQ,cAAeA,EAAS,KAAK,EACpD,eAAe,QAAQ,aAAc,KAAK,UAAU,CAClD,KAAMA,EAAS,KACf,KAAMA,EAAS,IAAA,CAChB,CAAC,GAGGA,CACT,CAKA,MAAM,IAA4B,CAChC,OAAOC,EAAwB,eAAe,CAChD,CAKA,SAAgB,CACd,eAAe,WAAW,aAAa,EACvC,eAAe,WAAW,YAAY,CACxC,CAKA,iBAA2B,CACzB,MAAMC,EAAQ,eAAe,QAAQ,aAAa,EAClD,MAAO,CAAC,CAACA,GAASA,EAAM,WAAW,MAAM,CAC3C,CAKA,kBAAwC,CACtC,GAAI,CACF,MAAMC,EAAU,eAAe,QAAQ,YAAY,EACnD,OAAOA,EAAU,KAAK,MAAMA,CAAO,EAAI,IACzC,MAAQ,CACN,OAAO,IACT,CACF,CACF,CAGO,MAAMC,EAAmB,IAAIP"}